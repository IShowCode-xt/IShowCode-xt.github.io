<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on IShowCode</title>
    <link>https://IShowCode-xt.github.io/tags/spring/</link>
    <description>Recent content in Spring on IShowCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 05 Sep 2022 12:35:53 +0800</lastBuildDate><atom:link href="https://IShowCode-xt.github.io/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>springmvc参数绑定</title>
      <link>https://IShowCode-xt.github.io/posts/s4/</link>
      <pubDate>Mon, 05 Sep 2022 12:35:53 +0800</pubDate>
      
      <guid>https://IShowCode-xt.github.io/posts/s4/</guid>
      <description>Springmvc参数绑定 【应用】能够使用SpringMVC获取基本类型参数 【应用】能够使用SpringMVC获取POJO类型参数 1、默认支持的参数类型 处理器形参中添加如下类型的参数，处理适配器会默认识别并进行赋值。
HttpServletRequest
通过request对象获取请求信息
HttpServletResponse
通过response处理响应信息
HttpSession
通过session对象得到session中存放的对象
Model/ModelMap
Model
Model对象可以向页面传递数据，其本质都是使用Request对象向jsp传递数据。
ModelMap
ModelMap是Model接口的实现类，也可以通过ModelMap向页面传递数据
使用Model和ModelMap的效果一样，如果直接使用Model，springmvc会实例化ModelMap。
代码如下：
@RequestMapping(&amp;#34;/quick1&amp;#34;) //绑定默认参数 注入Servlet 相关API public void quick1(HttpServletRequest request , HttpServletResponse response) throws ServletException, IOException { //向 request域中放数据 request.setAttribute(&amp;#34;msg&amp;#34;,&amp;#34;大家好&amp;#34;); //转发 request.getRequestDispatcher(&amp;#34;/WEB‐INF/jsp/success.jsp&amp;#34;).forward(request, response); } @RequestMapping(&amp;#34;/quick2&amp;#34;) //通过参数 注入原生的对象 public String quick2(Model model){ //向model放数据 等价于 向request域中放数据 model.addAttribute(&amp;#34;msg&amp;#34;,&amp;#34;好好学习&amp;#34;); return &amp;#34;success&amp;#34;; } 2、绑定简单类型 当请求的参数名称和处理器形参名称一致时会将请求参数与形参进行绑定。 这样，从Request取参数的方法就可以进一步简化。
/ /接收简单的数据 @RequestMapping(&amp;#34;/quick3&amp;#34;) //定义一个参数名和提交的数据的key一致 public String quick3(int id ,String name){ System.out.println(id); System.out.println(name); return &amp;#34;success&amp;#34;; } 2.</description>
    </item>
    
    <item>
      <title>Springmvc基础</title>
      <link>https://IShowCode-xt.github.io/posts/s3/</link>
      <pubDate>Mon, 05 Sep 2022 12:35:53 +0800</pubDate>
      
      <guid>https://IShowCode-xt.github.io/posts/s3/</guid>
      <description>Springmvc基础 【应用】能够独立完成springmvc的入门案例 【应用】能够说出springmvc的执行流程 【应用】能够熟悉springmvc的常用组件 1、SpringMVC的简介 1.1 SpringMVC概述 SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于SpringFrameWork的后续产品，已经融合在 Spring Web Flow 中。
SpringMVC 已经成为目前最主流的MVC框架之一，并且随着Spring3.0 的发布，全面超越 Struts2，成为最优秀的MVC 框架。它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持RESTful 编程风格的请求。
1.2 Springmvc处理流程 ​ 1.3 SpringMVC快速入门 需求：客户端发起请求，服务器端接收请求，执行逻辑并进行视图跳转。
开发步骤
①导入SpringMVC相关坐标 ②配置SpringMVC核心控制器DispathcerServlet ③创建Controller类和视图页面 ④使用注解配置Controller类中业务方法的映射地址 ⑤配置SpringMVC核心文件 spring-mvc.xml ⑥客户端发起请求测试
代码实现 ①导入Spring和SpringMVC的坐标、导入Servlet和Jsp的坐标
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring‐context&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.8.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring‐test&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.8.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring‐jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.8.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring‐tx&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.8.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!‐‐springmvc相关‐‐&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring‐web&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.8.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Spring简介以及IOC详解</title>
      <link>https://IShowCode-xt.github.io/posts/s0/</link>
      <pubDate>Mon, 05 Sep 2022 12:35:53 +0800</pubDate>
      
      <guid>https://IShowCode-xt.github.io/posts/s0/</guid>
      <description>Spring简介和配置 学习目标 【应用】能够独立完成springIOC的快速入门 【应用】能够掌握spring的bean标签的配置 【应用】能够独立完成bean的对象属性注入 【应用】能够独立完成bean的普通属性注入 【理解】能够独立完成bean的集合属性注入
1、Spring概述 1.1 spring 是什么 Spring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control：反转控制）和AOP（Aspect Oriented Programming：面向切面编程）为内核。 提供了表现层 SpringMVC和持久层 Spring JDBCTemplate以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架。
1.2 Spring发展历程 1997 年， IBM提出了EJB 的思想 1998 年，SUN制定开发标准规范 EJB1.0 1999 年，EJB1.1 发布 2001 年，EJB2.0 发布 2003 年，EJB2.1 发布 2006 年，EJB3.0 发布 Rod Johnson 罗宾·约翰逊（ Spring 之父） Expert One-to-One J2EE Design and Development(2002) 阐述了 J2EE 使用EJB 开发设计的优点及解决方案 Expert One-to-One J2EE Development without EJB(2004) 阐述了 J2EE 开发不使用 EJB的解决方式（Spring 雏 形） 2021 年 7 月份发布了 Spring 的最新版本 Spring 5.</description>
    </item>
    
    <item>
      <title>纯手写爆肝史上最详细讲解SpringBoot</title>
      <link>https://IShowCode-xt.github.io/posts/s5/</link>
      <pubDate>Mon, 05 Sep 2022 12:35:53 +0800</pubDate>
      
      <guid>https://IShowCode-xt.github.io/posts/s5/</guid>
      <description>SpringBoot基础 一、SpringBoot简介 1.1. 什么是Spring Boot Spring Boot是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品:
一般把Spring Boot称为搭建程序的脚手架或者说是便捷搭建基于Spring的工程 脚手架。其最主要作用就是帮助开 发人员快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让开发人员关注业务而非配置。
1.2. 为什么要学习Spring Boot java一直被人诟病的一点就是臃肿、麻烦。 究其原因注意是两点：
复杂的配置
项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写 配置挤占了写应用程序逻辑的时间。
个是混乱的依赖管理
项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪 个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。 一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。
而Spring Boot让这一切成为过去！
Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器starter），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。 我们可以使用Spring Boot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。
1.3. Spring Boot的特点 1.3.1 SpringBoot的特点 为基于Spring的开发提供更快的入门体验 开箱即用，没有代码生成，也无需XML配置。同时也可以修改默认值来满足特定的需求 提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等 SpringBoot不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式 二、SpringBoot快速入门 接下来，我们就来利用Spring Boot搭建一个web工程，体会一下Spring Boot的魅力所在！
2.1 创建Maven工程 使用idea工具创建一个maven工程，该工程为普通的java工程即可
2.2 添加SpringBoot的起步依赖 看到这里很多同学会有疑惑，前面说传统开发的问题之一就是依赖管理混乱，怎么这里我们还需要管理依赖呢？难 道Spring Boot不帮我们管理吗？ 别着急，现在我们的项目与Spring Boot还没有什么关联。Spring Boot提供了一个名为spring-boot-starter-parent的工程，里面已经对各种常用依赖（并非全部）的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们就不用操心依赖的版本问题了，需要什么依赖，直接引入坐标即可 。
2.2.1. 添加父工程坐标 &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring‐boot‐starter‐parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.</description>
    </item>
    
    <item>
      <title>纯手写超详细讲解Spring JdbcTemplate&amp;声明式事务</title>
      <link>https://IShowCode-xt.github.io/posts/s2/</link>
      <pubDate>Mon, 05 Sep 2022 12:35:53 +0800</pubDate>
      
      <guid>https://IShowCode-xt.github.io/posts/s2/</guid>
      <description>JdbcTemplate基本使用 1-JdbcTemplate基本使用-概述(了解) JdbcTemplate是spring框架中提供的一个对象，是对原始繁琐的Jdbc API对象的简单封装。spring框架为我们提供 了很多的操作模板类。例如：操作关系型数据的JdbcTemplate和HibernateTemplate，操作nosql数据库的 RedisTemplate，操作消息队列的JmsTemplate等等。
2-JdbcTemplate基本使用-开发步骤(理解) ①导入spring-jdbc和spring-tx坐标 ②创建数据库表和实体 ③创建JdbcTemplate对象 ④执行数据库操作
3-JdbcTemplate基本使用-快速入门代码实现(应用) 导入spring-jdbc和spring-tx坐标 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring‐context&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.8.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring‐test&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.8.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring‐jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.8.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring‐tx&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.2.8.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!‐‐织入包‐‐&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.aspectj&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;aspectjweaver&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.8.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!‐‐数据源相关‐‐&amp;gt; &amp;lt;!‐‐ Druid连接池 ‐‐&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;druid&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.10&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!‐‐ mysql驱动 ‐‐&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql‐connector‐java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.1.39&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!‐‐servlet相关‐‐&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.servlet‐api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet.jsp&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.servlet.jsp‐api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.1&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.</description>
    </item>
    
    <item>
      <title>超详细讲解SpringMVC三层架构</title>
      <link>https://IShowCode-xt.github.io/posts/s1/</link>
      <pubDate>Mon, 05 Sep 2022 12:35:53 +0800</pubDate>
      
      <guid>https://IShowCode-xt.github.io/posts/s1/</guid>
      <description>SpringMVC三层架构 java SpringMVC的工程结构一般来说分为三层，自下而上是Modle层（模型，数据访问层）、Cotroller层（控制，逻辑控制层）、View层（视图，页面显示层），其中Modle层分为两层：dao层、service层，MVC架构分层的主要作用是解耦。采用分层架构的好处，普遍接受的是系统分层有利于系统的维护，系统的扩展。就是增强系统的可维护性和可扩展性。
对于Spring这样的框架，（View\Web）表示层调用控制层（Controller），控制层调用业务层（Service），业务层调用数据访问层（Dao）。 service层：业务层，用来实现业务逻辑。能调用dao层或者service层，返回数据对象DO或者业务对象BO，BO通常由DO转化、整合而来，可以包含多个DO的属性，也可以是只包含一个DO的部分属性。通常为了简便，如果无需转化，service也可以直接返回DO。外部调用（HTTP、RPC）方法也在这一层，对于外部调用来说，service一般会将外部调用返回的DTO转化为BO。是专注业务逻辑，对于其中需要的数据库操作，都通过Dao去实现。主要去负责一些业务处理，比如取得连接、关闭数据库连接、事务回滚,一些复杂的逻辑业务处理就放到service层。
DAO层：负责访问数据库进行数据的操作，取得结果集，之后将结果集中的数据取出封装到VO类对象之后返回给service层。数据层，直接进行数据库的读写操作，返回数据对象DO，DO与数据库表一一对应。Dao的作用是封装对数据库的访问：增删改查，不涉及业务逻辑，只是达到按某个条件获得指定数据的要求。
Cotroller层：叫做控制层，主要的功能是处理用户发送的请求。主要处理外部请求。调用service层，将service层返回的BO/DO转化为DTO/VO并封装成统一返回对象返回给调用方。如果返回数据用于前端模版渲染则返回VO，否则一般返回DTO。不论是DTO还是VO，一般都会对BO/DO中的数据进行一些转化和整合。
View层：叫做显示层，主要是负责现实数据。
在实际开发中dao层要先定义出自己的操作标准即标准接口，就是为了解耦合。</description>
    </item>
    
  </channel>
</rss>
